"
" VIM configuration file
" for development purposes
"

" This file uses fold. In order to work with it you can use:
" zo, zO, zc, zC, za, zA

if has('nvim')
  let g:VIM_CONFIG_HOME = $XDG_CONFIG_HOME . "/nvim"
  let g:VIM_CACHE_HOME  = $XDG_CACHE_HOME . "/nvim"
  let g:VIM_DATA_HOME   = $XDG_DATA_HOME . "/nvim"
  let g:VIM_PLUG_FILE   = $XDG_DATA_HOME . "/nvim/site/autoload/plug.vim"
else
  let g:VIM_CONFIG_HOME = $XDG_CONFIG_HOME . "/vim"
  let g:VIM_CACHE_HOME  = $XDG_CACHE_HOME . "/vim"
  let g:VIM_DATA_HOME   = $XDG_DATA_HOME . "/vim"
  let g:VIM_PLUG_FILE   = g:VIM_CONFIG_HOME . "/autoload/plug.vim"
endif

if !isdirectory(g:VIM_CACHE_HOME)
  call mkdir(g:VIM_CACHE_HOME, "", 0700)
endif
if !isdirectory(g:VIM_DATA_HOME)
  call mkdir(g:VIM_DATA_HOME, "", 0700)
endif

let g:VIM_PLUG_HOME = g:VIM_CACHE_HOME . "/plugged"
"let g:startify_session_dir = g:VIM_CONFIG_HOME . "/session"
" This var is used to load plugins only for those programming languages.
let g:MY_PROGRAMMING_LANGUAGES = ['go', 'html', 'javascript', 'perl', 'php', 'python', 'sh', 'vim']

" TODO add g:VIM_CACHE_HOME to runtimepath and move vim plug to it
" see /usr/share/vim/vim81/debian.vim
set runtimepath+=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
"let $VIM_PLUG_HOME = ""
"let &runtimepath += g:VIM_PLUG_HOME
"exe 'set runtimepath+=' . expand(g:VIM_PLUG_HOME)
"let g:VIM_PLUG_FILE = g:VIM_PLUG_HOME . "/autoload/plug.vim"

"set runtimepath+=$XDG_CACHE_HOME/fzf

if has('gui_running')
  " I do not want to store configuration in $HOME (i.e. ~/.gvimrc)
  " and ~/.config/gvim/gvimrc does not work, so I load gvimrc file
  " under runtimepath.
  runtime gvimrc

  " gvimrc is not being loaded
  set lines=999 columns=140
endif

" enable timeout for key sequence or keyboard code
set timeout
" The time in milliseconds that is waited for a key code or mapped key
" sequence to complete
set timeoutlen=500
"set lazyredraw


"|
"| Load plugins
"|
"{{{
if !filereadable(g:VIM_PLUG_FILE)
  silent execute ':!curl --output ' . g:VIM_PLUG_FILE . ' --fail --location --create-dirs'
    \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin(g:VIM_PLUG_HOME)
  """""""""""""""""""
  " General purpose
  """""""""""""""""""
  "{{{
  " A tree explorer plugin for vim.
  Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'} | Plug 'Xuyuanp/nerdtree-git-plugin', {'on': 'NERDTreeToggle'}
  " Plug 'jistr/vim-nerdtree-tabs' " https://github.com/scrooloose/nerdtree#faq
  Plug 'mhinz/vim-startify' " The fancy start screen for Vim.
"  Plug 'Shougo/vimproc.vim', { 'do': 'make' } " Interactive command execution in Vim (for vimshell).
"    Plug 'Shougo/vimshell.vim' " Powerful shell implemented by vim.
  " CtrlPMixed seems nice
  "Plug 'ctrlpvim/ctrlp.vim' " Active fork of kien/ctrlp.vim—Fuzzy file, buffer, mru, tag, etc finder.
  Plug 'junegunn/fzf', { 'dir': '~/.cache/fzf', 'do': './install --no-bash --no-zsh --no-fish' } " A command-line fuzzy finder.
  Plug 'junegunn/fzf.vim' " complete vim plugin for fzf
  Plug 'sheerun/vim-polyglot' " A solid language pack for Vim.
  " Automatically adjusts 'shiftwidth' and 'expandtab' heuristically.
  Plug 'tpope/vim-sleuth'
  Plug 'tpope/vim-eunuch'
  " The ultimate undo history visualizer for VIM.
  Plug 'mbbill/undotree'
  " Prevent various Vim features from keeping the contents of passwordstore.org.
  Plug 'https://git.zx2c4.com/password-store', {'rtp': 'contrib/vim/noplaintext.vim'}
  " Easy note taking in Vim.
  Plug 'xolox/vim-notes', {'on': 'Note'}
  " A syntax plugin for plain-text notes
  "Plug 'junegunn/vim-journal'
  " A Plugin to show a diff, whenever recovering a buffer.
  "Plug 'chrisbra/Recover.vim'
   " Unicode character metadataUnicode character metadata.
  Plug 'tpope/vim-characterize'
  "Plug 'kana/vim-smartinput'
  Plug 'dzeban/vim-log-syntax'
  "Plug 'andreshazard/vim-logreview'
  " Vim plugin that provides additional text objects
  Plug 'wellle/targets.vim'
  " A Vim cheat sheet that makes sense, inside Vim!
  Plug 'lifepillar/vim-cheat40'
  "Plug 'rhysd/vim-grammarous'
  "Plug 'edkolev/tmuxline.vim'
  "}}}

  """""""""""""""""""
  " Screen
  """""""""""""""""""
  "{{{
  " lean & mean status/tabline for vim that's light as air.
  Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
  "" Distraction-free writing in Vim .
  Plug 'junegunn/goyo.vim' | Plug 'junegunn/limelight.vim'
  " Adds file type glyphs/icons to popular Vim plugins.
  Plug 'ryanoasis/vim-devicons'
  "}}}

  """""""""""""""""""
  " Git
  """""""""""""""""""
  "{{{
  Plug 'tpope/vim-fugitive' " a Git wrapper so awesome, it should be illegal.
    "Plug 'tpope/vim-rhubarb' " GitHub extension for fugitive.vim
    "Plug 'shumphrey/fugitive-gitlab.vim' " An extension to fugitive.vim for gitlab support
  Plug 'gregsexton/gitv', {'on': ['Gitv']} " gitk for Vim.
  Plug 'airblade/vim-gitgutter' " A Vim plugin which shows a git diff in the gutter (sign column) and stages/undoes hunks.
  Plug 'junegunn/gv.vim', {'on': ['GV']} " A git commit browser in Vim.
  Plug 'jreybert/vimagit'
  "}}}

  """""""""""""""""""
  " Software
  " development
  """""""""""""""""""
  "{{{
  "Plug 'vim-syntastic/syntastic' " Syntax checking hacks for vim. (conflicts with 'w0rp/ale')
  " Highlights trailing whitespace in red and provides :FixWhitespace to fix it. ('w0rp/ale' does the same)
  "Plug 'bronson/vim-trailing-whitespace'
  Plug 'w0rp/ale' " Asynchronous Lint Engine.
  Plug 'ntpeters/vim-better-whitespace', {'for': g:MY_PROGRAMMING_LANGUAGES}
  "Plug 'scrooloose/nerdcommenter', {'on': ['NERDComComment', 'NERDComToggleComment']} "  Vim plugin for intensely orgasmic commenting.
  Plug 'scrooloose/nerdcommenter'
  Plug 'Yggdroot/indentLine' " Display the indention levels with thin vertical lines.
  "Plug 'junegunn/vim-easy-align' " A Vim alignment plugin. # TODO study
  "Plug 'tpope/vim-surround' " Quoting/parenthesizing made simple. # TODO conferir se preciso ou se o outro plugin é melhor
  "Plug 'SirVer/ultisnips', {'for': g:MY_PROGRAMMING_LANGUAGES} " The ultimate snippet solution for Vim.
    "Plug 'honza/vim-snippets', {'for': g:MY_PROGRAMMING_LANGUAGES} " Snippets files for various programming languages.
  "Plug 'ervandew/supertab' " Perform all your vim insert mode completions with Tab.
  Plug 'ludovicchabant/vim-gutentags', {'for': g:MY_PROGRAMMING_LANGUAGES} " A Vim plugin that manages your tag files.
  Plug 'majutsushi/tagbar', {'on': ['Tagbar', 'TagbarToggle']} " Displays tags in a window, ordered by scope.
  Plug 'lvht/tagbar-markdown', {'on': ['Tagbar', 'TagbarToggle'], 'for': 'markdown'} " vim-tagbar extension for markdown.
  "Plug 'tpope/vim-dadbod', {'on': 'DB'} " dadbod.vim: Modern database interface for Vim

  " A code-completion engine for Vim.
  " 2017-11-27 - Tobias - PHP support is insufficient.
  " Must have: apt-get install build-essential cmake python-dev python3-dev
  " Nice to have: apt-get install golang nodejs npm
  "Plug 'Valloric/YouCompleteMe', { 'do': './install.py --go-completer --js-completer' }

  " The PHP plugin is problematic.
  "Plug 'roxma/LanguageServer-php-neovim',  {'do': 'composer install && composer run-script parse-stubs'}

  " Language Server Protocol (LSP) support for vim and neovim.
  Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

  " deoplete: Dark powered asynchronous completion framework for neovim/Vim8.
  Plug 'Shougo/neco-syntax'
  Plug 'zchee/deoplete-jedi', {'for': 'python'}
  Plug 'zchee/deoplete-zsh', {'for': 'zsh'}
  Plug 'Shougo/neco-vim', {'for': 'vim'}
  Plug 'deathlyfrantic/deoplete-spell'
  if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
  endif

  " Minimalist autocompletion plugin for Vim.
  "Plug 'lifepillar/vim-mucomplete'

  " Intellisense engine for vim8 & neovim, full language server protocol
  " support as VSCode.
  "Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}

  "Plug 'ekalinin/Dockerfile.vim' " Vim syntax file & snippets for Docker's Dockerfile.
  "Plug 'jiangmiao/auto-pairs' " Insert or delete brackets, parens, quotes in pair.
  Plug 'andymass/vim-matchup', {'for': g:MY_PROGRAMMING_LANGUAGES} " Navigate and highlight matching words. Modern matchit and matchparen replacement.
  "Plug 'jaxbot/semantic-highlight.vim' " Where every variable is a different color.
  "Plug 'janko-m/vim-test', {'for': g:MY_PROGRAMMING_LANGUAGES} " Run your tests at the speed of thought.
  "Plug 'tpope/vim-dispatch' " Asynchronous build and test dispatcher
  "Plug 'terryma/vim-multiple-cursors' " True Sublime Text style multiple selections for Vim.
  "Plug 'ap/vim-css-color', {'for': 'css'} " Preview colours in source code while editing

  " PHP {{{
  " StanAngeloff/php.vim is loaded by vim-polyglot.
  "Plug 'shawncplus/phpcomplete.vim' " Improved PHP omnicompletion
  " configure install
  "Plug 'lvht/phpcd.vim', {'for': 'php'} " A Intelligent/Smart PHP Complete Daemon Plugin for Vim/NeoVim
  "Plug 'arnaud-lb/vim-php-namespace', {'for': 'php'} " types "use" statements for you
  "Plug 'vim-php/vim-php-refactoring'
  "Plug 'vim-php/tagbar-phpctags.vim', {'for': 'php'}
  "let phpctags_exists=expand('~/.vim/bin/phpctags')
  "if !filereadable(phpctags_exists)
    "echo "Installing phpctags..."
    "echo ""
    "silent !\curl -fLo ~/.vim/bin/phpctags --create-dirs http://vim-php.com/phpctags/install/phpctags.phar
  "endif
  "Plug 'rayburgemeestre/phpfolding.vim', {'for': 'php'}
  "Plug '2072/PHP-Indenting-for-VIm', {'for': 'php'} // very problematic
  "Plug 'vim-php/vim-composer'
  "Plug 'wdalmut/vim-phpunit.git'
  "}}}

  " Golang {{{
  " fatih/vim-go is loaded by vim-polyglot but I want the original package =)
  "Plug 'fatih/vim-go', {'for': 'go', 'do': ':GoInstallBinaries'}
  "}}}
  "}}}

  """""""""""""""""""
  " Color schemes
  " and icons
  """""""""""""""""""
  " {{{
  "Plug 'godlygeek/csapprox' " (old: vim-scripts/CSApprox) Make gvim-only colorschemes work transparently in terminal vim.
  Plug 'tomasr/molokai' " Molokai color scheme for Vim.
  "Plug 'junegunn/seoul256.vim' " Low-contrast Vim color scheme based on Seoul Colors.
  Plug 'joshdick/onedark.vim' " A dark Vim/Neovim color scheme inspired by Atom's One Dark syntax theme.
  "Plug 'chriskempson/base16-vim' " Base16 for Vim.
  "Plug 'mhinz/vim-janah' " A dark colorscheme for Vim.
  "Plug 'nanotech/jellybeans.vim', { 'tag': 'v1.6' } " A colorful, dark color scheme for Vim.
  Plug 'romainl/Apprentice' " A dark, low-contrast, Vim colorscheme.
  "Plug 'rakr/vim-one' " Adaptation of one-light and one-dark colorschemes for Vim.
  Plug 'morhetz/gruvbox' " Retro groove color scheme for Vim.
  "}}}

  """""""""""""""""""
  " Misc
  """""""""""""""""""
  "{{{
  "Plug 'johngrib/vim-game-code-break'
  Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }} " markdown preview plugin for (neo)vim
  Plug 'godlygeek/tabular' | Plug 'plasticboy/vim-markdown'
  "Plug 'tpope/vim-markdown'
  "Plug 'gabrielelana/vim-markdown'
  "}}}
  " Initialize plugin system
call plug#end()
"}}}


"|
"| Configure plugins
"|

"""""""""""""""""""
" General purpose
"""""""""""""""""""
"{{{
" scrooloose/nerdtree {{{
"let g:nerdtree_tabs_open_on_gui_startup = 0 " Show vim-startify in a new gvim window without files
" natural sort order will be used
let NERDTreeNaturalSort=1
" the 'wildignore' setting is respected
let NERDTreeRespectWildIgnore=1
" single click will open directory nodes, while a double
" click will still be required for file nodes.
let NERDTreeMouseMode=2
" If set to 1, the NERD tree window will close after opening a file.
let NERDTreeQuitOnOpen=1
" display hidden files by default.
let NERDTreeShowHidden=1
" This options disables the 'Bookmarks' label 'Press ? for help' text.
let NERDTreeMinimalUI=1
" Disables listchars on NERDTree
autocmd filetype nerdtree set listchars=
" Closes vim if the only window left open is a NERDTree.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Keys mapping
nnoremap <silent> <F3> :NERDTreeToggle<CR>
"}}}

" mhinz/vim-startify {{{
let g:startify_list_order = [
            \ ['   Sessions:'],
            \ 'sessions',
            \ ['   Most recently used files:'],
            \ 'files',
            \ ['   Bookmarks:'],
            \ 'bookmarks',
            \ ['   Commands:'],
            \ 'commands',
            \ ]

let g:startify_files_number = 30
let g:startify_change_to_dir = 1 " When opening a file or bookmark, change to its directory.
let g:startify_change_to_vcs_root = 1 " When opening a file or bookmark, seek and change to the root directory of the VCS.
let g:startify_fortune_use_unicode = 1 " Fortune header uses utf-8.
let g:startify_session_dir = g:VIM_CONFIG_HOME . "/session"
let g:startify_session_number = 10 " The maximum number of sessions to display.
let g:startify_session_sort = 1 " Sort sessions by modification time.
"let g:ascii = [
      "\ '  _____ _   _ _    _ ',
      "\ ' / ____| \ | | |  | |',
      "\ '| |  __|  \| | |  | |',
      "\ '| | |_ | . ` | |  | |',
      "\ '| |__| | |\  | |__| |',
      "\ ' \_____|_| \_|\____/',
      "\ '',
      "\]
"let g:startify_custom_header = 'map(g:ascii, "\"   \".v:val")'
let g:startify_custom_header = ''
function! StartifyEntryFormat()
    return 'WebDevIconsGetFileTypeSymbol(absolute_path) ." ". entry_path'
endfunction
" Keys mapping
nnoremap <leader>so :SOpen<Space>
nnoremap <leader>ss :SSave<Space>
nnoremap <leader>sd :SDelete<CR>
nnoremap <leader>sc :SClose<CR>
"}}}

" ctrlpvim/ctrlp.vim {{{
" Key mappings
" #TODO compare with fzf
map <silent> <leader>jd :CtrlPTag<cr><c-\>w
"}}}

" junegunn/fzf {{{
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"
" The Silver Searcher
" https://github.com/ggreer/the_silver_searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
"else
    "echoerr "Execute: sudo apt install silversearcher-ag"
endif
" ripgrep
" https://github.com/BurntSushi/ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif
" Keys mapping
" Show files in current directory
nnoremap <silent> <leader>e :FZF -m<CR>
nnoremap <silent> <leader>fb :Buffers<CR>
nnoremap <silent> <leader>fc :Commits<CR>
nnoremap <silent> <leader>ff :FZF<CR>
nnoremap <silent> <leader>fh :History<CR>
nnoremap <silent> <leader>fs :Snippets<CR>
nnoremap <silent> <leader>ft :Tags<CR>
nnoremap <silent> <leader>fw :Windows<CR>
" Git SearcH
noremap <Leader>gsh :Commit<CR>

"}}}

" mbbill/undotree {{{
let g:undotree_WindowLayout = 2
let g:undotree_SetFocusWhenToggle = 1 " If set, let undotree window get focus after being opened, otherwise focus will stay in current window.
" Keys mapping
nnoremap <F4> :UndotreeToggle<cr>
"}}}
"}}}

"""""""""""""""""""
" Screen
"""""""""""""""""""
"{{{
" vim-airline {{{
"function! s:randnum(max) abort
  "return str2nr(matchstr(reltimestr(reltime()), '\v\.@<=\d+')[1:]) % a:max
"endfunction
let g:airline_powerline_fonts = 1
" Nice themes: molokai, powerlineish, tomorrow, base16, angr
"let s:airline_themes = ['molokai', 'powerlineish', 'tomorrow', 'base16', 'angr']
"let g:airline_theme = s:airline_themes[s:randnum(5)]
let g:airline_theme = 'molokai'
"if !exists('g:airline_symbols')
  "let g:airline_symbols = {}
"endif
"let g:airline_symbols.spell = 'Ꞩ'

let g:airline_right_sep = '◀'
let g:airline_left_sep = '▶'
" Tabline seperators
let g:airline#extensions#tabline#left_sep = '▶'
let g:airline#extensions#tabline#right_sep = '◀'
"let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail'

let g:airline#extensions#tabline#enabled = 1 " Automatically displays all buffers when there's only one tab open.
" enable/disable displaying buffers with a single tab.
let g:airline#extensions#tabline#show_buffers = 0
" configure whether buffer numbers should be shown.
let g:airline#extensions#tabline#buffer_nr_show = 1

let g:airline#extensions#tabline#show_tabs = 1

" enable/disable displaying tab number in tabs mode.
let g:airline#extensions#tabline#show_tab_nr = 0

" configure whether close button should be shown
let g:airline#extensions#tabline#show_close_button = 0


" Branch {
let g:airline#extensions#branch#enabled = 1
" truncate long branch names to a fixed length
let g:airline#extensions#branch#displayed_head_limit = 10
" change the text for when no branch is detected
let g:airline#extensions#branch#empty_message = ''
" to truncate all path sections but the last one, e.g. a branch
let g:airline#extensions#branch#format = 1
" }

" Bufferline {
" enable/disable bufferline integration
let g:airline#extensions#bufferline#enabled = 0
" }

let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#languageclient#enabled = 1
let g:airline_skip_empty_sections = 1
"}}}

" junegunn/limelight.vim {{{
autocmd! User GoyoEnter Limelight
" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'
"}}}
"}}}

"""""""""""""""""""
" Git
"""""""""""""""""""
"{{{
" tpope/vim-fugitive {{{
" The following autocommand will cause the quickfix window to open after any grep invocation
autocmd QuickFixCmdPost *grep* cwindow
" fugitive-gitlab.vim
"let g:fugitive_gitlab_domains = ['http://gitlab.com']
" tpope/vim-rhubarb
"let g:github_enterprise_urls = ['https://example.com']
" Keys mapping
noremap <Leader>ga :Gwrite<CR>
" Git COmmit
noremap <Leader>gco :Gcommit<CR>
"noremap <Leader>gsh :Gpush<CR>
"noremap <Leader>gll :Gpull<CR>
" Git STatus
noremap <Leader>gst :Gstatus<CR>
" Git BLame
noremap <Leader>gbl :Gblame<CR>
" Git DIff
noremap <Leader>gdi :Gvdiff<CR>
" Git REmove
noremap <Leader>gre :Gremove<CR>
" Git Open Browser
nnoremap <Leader>gob :.Gbrowse<CR>
"}}}

" airblade/vim-gitgutter {{{
let g:gitgutter_max_signs = 500  " 500 is the default value
"let g:gitgutter_highlight_lines = 1 " To turn on line highlighting by default
" If you experience a lag, you can trade speed for accuracy:
"let g:gitgutter_realtime = 0
"let g:gitgutter_eager = 0
"}}}
"}}}

"""""""""""""""""""
" Software
" development
"""""""""""""""""""
"{{{
" w0rp/ale {{{
"let g:ale_fix_on_save = 1 " fix files automatically on save.
"let g:ale_completion_enabled = 1 " By now only TypeScript is supported.
"let g:ale_sign_column_always = 1 " keep the sign gutter open at all times
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_echo_msg_error_str = 'E' " is the string used for error severity.
let g:ale_echo_msg_warning_str = 'W' " is the string used for warning severity.
let g:ale_echo_msg_format = '[%linter%] [%severity%] %s' " the format of message echoed by ALE.
let g:ale_set_loclist = 0 " Toggle the loclist use.
let g:ale_set_quickfix = 1 " Toggle the quickfix use.
let g:ale_open_list = 0 " Oppen quickfix when ALE detects errors/warnings.
"let g:ale_keep_list_window_open = 1 " Keep the window open even after errors disappear.
" Put this in vimrc or a plugin file of your own.
" After this is configured, :ALEFix will try and fix your JS code with ESLint.
let g:ale_fixers = {
\   'php': ['phpcbf'],
\}
" Set this setting in vimrc if you want to fix files automatically on save.
" This is off by default.
let g:ale_fix_on_save = 1
let g:airline#extensions#ale#enabled = 1 " enable support for w0rp/ale in vimairline
"}}}

" scrooloose/nerdcommenter {{{
" C-_ is control+/
nmap <C-_>   <Plug>NERDCommenterToggle
vmap <C-_>   <Plug>NERDCommenterToggle<CR>gv
" restore the lost useful mapping
map <leader>c<space>  <plug>NERDCommenterToggle
"imap <C-_>    <C-\><C-O> :NERDCommenterToggle<CR>
"imap <C-_> <ESC> :NERDCommenterToggle <CR>
"}}}

" Yggdroot/indentLine {{{
let g:indentLine_enabled = 1
let g:indentLine_concealcursor = 0
let g:indentLine_char = '⁞'
let g:indentLine_faster = 1
"}}}

" SirVer/ultisnips {{{
"let g:UltiSnipsExpandTrigger="<tab>" " #TODO configurar uma tecla. Nao nao pode pois uso o youcompleteme
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<c-b>"
"let g:UltiSnipsEditSplit="vertical"
"}}}

" ervandew/supertab {{{
"let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabCrMapping = 1
let g:SuperTabClosePreviewOnPopupClose = 1
"}}}

" ludovicchabant/vim-gutentags {{{
let g:gutentags_cache_dir = g:VIM_CACHE_HOME . '/gutentags'
let g:gutentags_ctags_exclude = ['*.css', '*.html', '*.js']
"}}}

" majutsushi/tagbar {{{
let g:tagbar_autofocus = 1
" Keys mapping
nmap <F12> :TagbarToggle<CR>
let g:tagbar_type_xml = {
    \ 'ctagstype' : 'WSDL',
    \ 'kinds'     : [
        \ 'n:namespaces',
        \ 'm:messages',
        \ 'p:portType',
        \ 'o:operations',
        \ 'b:bindings',
        \ 's:service'
    \ ]
\ }
let g:tagbar_type_css = {
\ 'ctagstype' : 'Css',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
    \ ]
\ }
"}}}

" YouCompleteMe {{{
"nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
"let g:ycm_always_populate_location_list = 1
"}}}

" autozimu/LanguageClient-neovim {{{
" composer global require felixfbecker/language-server
"
let g:LanguageClient_serverCommands = {
    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
    \ 'python': ['/usr/local/bin/pyls'],
    \ }
"\ 'php': ['php', '~/.config/composer/vendor/felixfbecker/language-server/bin/php-language-server.php'],
"nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
"nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
"nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
"nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
"}}}

" Shougo/deoplete.nvim {{{
" Enables automatic completation.
let g:deoplete#enable_at_startup = 1
"call deoplete#custom#option({
    "\ 'complete_method': "omnifunc",
    "\ 'max_list': 30,
    "\ 'num_processes': -1
    "\ })
"let g:deoplete#sources#jedi#show_docstring = 1
"let g:python_host_prog = '/tmp/neovim_env/bin/python'
"let g:python3_host_prog = '/tmp/neovin_env/bin/python3'
"}}}

" lifepillar/vim-mucomplete {{{
let g:mucomplete#enable_auto_at_startup = 1
"}}}

""""""""""""""""""
" Misc
"""""""""""""""""""
"{{{
" iamcco/markdown-preview.vim {{{
" path to the chrome or the command to open chrome(or other modern browsers)
" if set, g:mkdp_browserfunc would be ignored
let g:mkdp_path_to_chrome = "/usr/bin/firefox"
" callback vim function to open browser, the only param is the url to open
let g:mkdp_browserfunc = 'MKDP_browserfunc_default'
" set to 1, the vim will open the preview window once enter the markdown
" buffer
let g:mkdp_auto_start = 0
" set to 1, the vim will auto open preview window when you edit the
" markdown file
let g:mkdp_auto_open = 0
" set to 1, the vim will auto close current preview window when change
" from markdown buffer to another buffer
let g:mkdp_auto_close = 1
" set to 1, the vim will just refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
let g:mkdp_refresh_slow = 0
" set to 1, the MarkdownPreview command can be use for all files,
" by default it just can be use in markdown file
let g:mkdp_command_for_global = 0
" Keys mapping
nmap <silent> <F8> <Plug>MarkdownPreview        " for normal mode
imap <silent> <F8> <Plug>MarkdownPreview        " for insert mode
nmap <silent> <F9> <Plug>StopMarkdownPreview    " for normal mode
imap <silent> <F9> <Plug>StopMarkdownPreview    " for insert mode
"}}}

" plasticboy/vim-markdown {{{
let g:vim_markdown_folding_disabled = 1
"let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_folding_level = 2
let g:vim_markdown_conceal = 0 " disabled
let g:vim_markdown_fenced_languages = ['c++=cpp', 'viml=vim', 'bash=sh', 'ini=dosini', 'csharp=cs', 'php']
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_toml_frontmatter = 1
let g:vim_markdown_json_frontmatter = 1
"}}}

" tpope/vim-markdown {{{
" this works but at the moment I'm using plasticboy plugin because it is
" already configured.
"autocmd BufNewFile,BufReadPost *.md set filetype=markdown
"let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
"let g:markdown_minlines = 100
"}}}
"}}}


"|
"| General configurations
"|
"{{{
" http://stackoverflow.com/questions/5845557/in-a-vimrc-is-set-nocompatible-completely-useless
set nocompatible

" Enable hidden buffers
set hidden

" Enable filetype detection, plugin and indent loading for specific file
" types.
filetype plugin indent on

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

"" Copy/Paste/Cut
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif

" Recarrega automaticamente arquivos que foram alterados no disco
set autoread

"" Encoding
if &modifiable
	set encoding=utf-8
	set fileencoding=utf-8
endif
"set bomb
"set binary
set ttyfast
" nao funciona no nvim
"set ttymouse=xterm2

"" Fix backspace indent
set backspace=indent,eol,start

" http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
" https://github.com/ncm2/ncm2#install
" suppress the annoying 'match x of y', 'The only match' and 'Pattern not found' messages
set shortmess+=c
"set completeopt=noinsert,longest,menuone
set completeopt=menu,menuone,preview,noinsert,noselect
" Enter select first option
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Remap code completion to Ctrl+Space {{{
inoremap <Nul> <C-x><C-o>
inoremap <Nul> <C-n>
"}}}
" Autocomplete with TAB {{{
"inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"}}}
" Workflow: ao difigitar ir exibindo as sugestoes mas sem
" selecionar. Ao precisar enter ou control+space completar
" com a primeira sugestao. Backspace apos isso deleta esse autocomplete.
" Talvez digitar control+space para chamar o autocomplete ja ajude, ai
" depois uso control+pace para selecionar.
"Read some more on :help popupmenu-keys or :help ins-completion

set concealcursor=nc
" Show confirmation when exiting an unsaved buffer.
set confirm

" For airblade/vim-gitgutter
set updatetime=100

" Show non printable characters
"set listchars=tab:⇨\ ,eol:⏎,nbsp:☠,trail:•,extends:⟩,precedes:⟨
set listchars=tab:⇨\ ,nbsp:☠,trail:•,extends:⟩,precedes:⟨
set list

" Make File-Open track directory of current file
set browsedir=buffer

"Keep backups of files in case I mess up :)
let s:backupDir = g:VIM_CACHE_HOME . "/backup"
if !isdirectory(s:backupDir)
  call mkdir(s:backupDir, "", 0700)
endif
let &backupdir=s:backupDir
set backup
set backupcopy=yes

" Where store swap files.
let s:swapDir = g:VIM_CACHE_HOME . "/swap"
if !isdirectory(s:swapDir)
  call mkdir(s:swapDir, "", 0700)
endif
" /,. means: use default directory if an error occurs in swapDir
let &directory = s:swapDir . "/,."

" Persists undo while computer is on
"let s:undoDir = "/tmp/.undodir_" . $USER
let s:undoDir = g:VIM_CACHE_HOME . "/undo"
if !isdirectory(s:undoDir)
  call mkdir(s:undoDir, "", 0700)
endif
let &undodir=s:undoDir
set undofile
set undolevels=10000

let &viminfo="'1000,n" . g:VIM_DATA_HOME . "/viminfo"

" Session
" If you don't want help windows to be restored:
set sessionoptions-=help
" Don't save hidden and unloaded buffers in sessions.
set sessionoptions-=buffers

" Enable spell checking.
"if !filereadable(expand('~/.vim/spell/en.utf-8.sug'))
  "echo "Downloading spell files..."
  "echo ""
  "silent !\curl -fLo ~/.vim/spell/en.utf-8.sug --create-dirs http://ftp.vim.org/vim/runtime/spell/en.utf-8.sug
  "silent !\curl -fLo ~/.vim/spell/en.utf-8.spl --create-dirs http://ftp.vim.org/vim/runtime/spell/en.utf-8.spl

  "silent !\curl -fLo ~/.vim/spell/pt.utf-8.sug --create-dirs http://ftp.vim.org/vim/runtime/spell/pt.utf-8.sug
  "silent !\curl -fLo ~/.vim/spell/pt.utf-8.spl --create-dirs http://ftp.vim.org/vim/runtime/spell/pt.utf-8.spl
"endif
""set spell
"set spellfile=$HOME/.vim/spell/en.utf-8.add,$HOME/.vim/spell/pt.utf-8.add
"set spelllang=en,pt
"}}}

" For spell checking
set mousemodel=popup_setpos


"|
"| Screen-related configurations
"|
"set foldenable foldlevel=0 " did not work
"{{{
syntax on
set number " shows line number
set relativenumber " shows line number relative to the current line

set mouse=a
set mousefocus
set nomousehide
set mousemodel=popup_setpos
set t_Co=256
set signcolumn=yes " Always show sign column.

" If you prefer the scheme to match the original monokai background color.
"let g:molokai_original = 1
" Alternative scheme under development for color terminals which attempts to bring the 256
" color version as close as possible to the the default (dark) GUI version.
"let g:rehash256 = 1
try
	colorscheme molokai
catch /^Vim\%((\a\+)\)\=:E185/
	call PlugInstall()
endtry
"colorscheme onedark
"colorscheme gruvbox

" Matches the terminal colors
" Do not set this https://github.com/tmux/tmux/issues/699
"set termguicolors

"" Disable the blinking cursor.
"set gcr=a:blinkon0
set scrolloff=3

"" Use modeline overrides
set modeline
set modelines=10

set title
set titleold="Terminal"
" :h statusline
set titlestring="%F%m %Y"
" This is nice, but makes scrolling very slow
"set title titlestring=...%{strpart(expand(\"%:p:h\"),stridx(expand(\"%:p:h\"),\"/\",strlen(expand(\"%:p:h\"))-12))}%=%n.\ \ %{expand(\"%:t:r\")}\ %m\ %Y\ \ \ \ %l\ of\ %L " [ref05]

set showcmd

" Faz com que o vim pule para a posição no arquivo onde se parou na última
" fez que ele foi aberto
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Quando um bracket eh inserido, saltar rapidamente para o seu primeiro
" correspondente. O salto só ocorre se o correspondente pode ser visto na
" tela atual. Para definir por quanto tempo o salto ocorrera, use 'matchtime'
"set showmatch
"set textwidth=80
set colorcolumn=+1
set cursorline " Destaca a linha onde o cursor está.

" airline already shows the current vim mode.
set noshowmode
"set cmdheight=1
"set laststatus=0


" Igora case sensitive durante as buscas
set ignorecase
" Ignora a opcao 'ignorecase' se o texto a ser buscado contem caracteres
" maiusculos
set smartcase
" Quando há uma padrao de uma pesquisa anterior, destaque todos os resultados
set hlsearch
" Busca incremental. Vai buscando e mostrando os resultados conforme se
" vai digitando o texto a buscar.
set incsearch

" Default indent with tabs. [ref 08]
" Changes the width of the TAB character.
"set tabstop=4
" Affects what happens when you press >>, << or ==. It also affects how
" automatic indentation works.
"set shiftwidth=4
" Affects what happens when you press the <TAB> or <BS> keys.
" Its default value is the same as the value of 'tabstop'.
"set softtabstop=0
" Affects what happens when you press the <TAB> key.
" If 'expandtab' is set, pressing the <TAB> key will always
" insert 'softtabstop' amount of space characters.
" Otherwise, the amount of spaces inserted is minimized
" by using TAB characters.
"set expandtab

" Configure vimdiff
if &diff
    colorscheme apprentice

    set diffopt+=iwhite
    set diffexpr=""
endif

" Ignore whitespace on diff
" https://stackoverflow.com/a/4271247/4668660
"set diffopt+=iwhite
"set diffexpr=DiffW()
"function DiffW()
  "let opt = ""
   "if &diffopt =~ "icase"
     "let opt = opt . "-i "
   "endif
   "if &diffopt =~ "iwhite"
     "let opt = opt . "-w " " swapped vim's -b with -w
   "endif
   "silent execute "!diff -a --binary " . opt .
     "\ v:fname_in . " " . v:fname_new .  " > " . v:fname_out
"endfunction

" Removes | in window separator
" https://stackoverflow.com/questions/9001337/vim-split-bar-styling
"set fillchars+=vert:\ 
"}}}



"|
"| Keys mapping for built-in vim features
"|
" Keys mapping for plugins is in plugins section
"{{{
" Reload vimrc.
nnoremap <F5> :so ~/.config/vim/vimrc<CR>

" Leader key
"let mapleader=","
"let g:mapleader=","
" [ref 07]
map <space> <leader>
map <space><space> <leader><leader>

" Map ; to : in order to avoid shift use.
nnoremap ; :

" exit insert mode with kj
inoremap kj <ESC>
"set timeoutlen=1000 ttimeoutlen=0

" Avoid some common mistakes
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

" Press i to enter insert mode, and ii to exit.
"imap ii <Esc>

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Faz com que blocos selecionados sejam reselecionados após identações
vnoremap < <gv
vnoremap > >gv

" ,p alterna o modo paste
" parece que é melhor que pastetoggle
"nmap <leader>p :set paste!<BAR>set paste?<CR>
noremap YY "+y<CR>
noremap <leader>p "+gP<CR>
noremap XX "+x<CR>

" cd. muda para o diretorio do arquivo atual
"cmap cd. lcd %:p:h

" Save current file [09]
noremap <C-S> :w<CR>
vnoremap <C-S> <C-C>:w<CR>
inoremap <C-S> <C-O>:w<CR>

" Quit vim with C-Q
noremap <C-Q> :qa<CR>
vnoremap <C-Q> <C-C>:qa<CR>
inoremap <C-Q> <C-O>:qa<CR>

" Switching windows
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h

" https://github.com/amix/vimrc#spell-checking
map <leader>sc :setlocal spell!<cr>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=
"
map <leader>es :botright cope<cr>
"map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>en :cn<cr>
map <leader>ep :cp<cr>

" Set working directory
nnoremap <leader>cd :lcd %:p:h<CR>

" Diff Get Right
" #TODO Seria bom usar apenas o `do` e `dp`. se for git repo, usar diffget, se nao,
" usar normal. o diffget nao parece ser de plugin.
noremap <Leader>dgr :diffget RE<CR>
" Diff Get Base
noremap <Leader>dgb :diffget BA<CR>
" Diff Get Left
noremap <Leader>dgl :diffget LO<CR>

" Clean search highlight
nnoremap <silent> <leader>n :noh<cr>

" Execute (run) current file
nnoremap <leader>r :!"%:p"<CR>

" Split
noremap <Leader>sp :<C-u>split<CR>
noremap <Leader>sv :<C-u>vsplit<CR>

" Tabs
nnoremap <silent> <Tab> gt
nnoremap <silent> <S-Tab> gT
nnoremap <silent> <C-t> :tabnew<CR>
nnoremap <silent> <A-t> :tabnew<CR>
nnoremap <silent> <A-w> :close<CR> " Ctrl + w c

" SmartHome
" Pressing the Home key moves the cursor to the first nonblank character on
" the line, or, if already at that position, to the start of the line.
function! SmartHome()
  let first_nonblank = match(getline('.'), '\S') + 1
  if first_nonblank == 0
    return col('.') + 1 >= col('$') ? '0' : '^'
  endif
  if col('.') == first_nonblank
    return '0'  " if at first nonblank, go to start line
  endif
  return &wrap && wincol() > 1 ? 'g^' : '^'
endfunction
noremap <expr> <silent> <Home> SmartHome()
imap <silent> <Home> <C-O><Home>
"}}}

"}}}

" vim: foldenable foldmethod=marker foldlevel=0

