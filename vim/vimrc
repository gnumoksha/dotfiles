""""""""""""""""""""""""""""""""""""""""""
"                                        "
"       VIM configuration file for       "
"          development purposes          "
"                                        "
""""""""""""""""""""""""""""""""""""""""""
"TODO how ignore debian vim home?
"TODO remove unused code (from basic.vim)"

if !executable("curl")
  echoerr "You do not have curl installed and you will need it :)"
  execute "q!"
endif


"""""""""""""""""""""""""""""""
"                             "
"         Load plugins        "
"                             "
"""""""""""""""""""""""""""""""
if !filereadable(expand('~/.vim/autoload/plug.vim'))
  echo "Installing Vim-Plug..."
  echo ""
  silent !\curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

  autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')
" General purpose
Plug 'scrooloose/nerdtree' " A tree explorer plugin for vim.
Plug 'jistr/vim-nerdtree-tabs' " TODO this plugin is not necessary https://github.com/scrooloose/nerdtree#faq
Plug 'mhinz/vim-startify' " The fancy start screen for Vim.
Plug 'xolox/vim-misc' " Miscellaneous auto-load Vim scripts.
Plug 'xolox/vim-session' " Extended session management for Vim (:mksession on steroids).
Plug 'vim-airline/vim-airline' " lean & mean status/tabline for vim that's light as air.
Plug 'vim-airline/vim-airline-themes' " A collection of themes for vim-airline.
Plug 'Shougo/vimshell.vim' " Powerful shell implemented by vim.
Plug 'Shougo/vimproc.vim', { 'do': 'make' } " Interactive command execution in Vim.
Plug 'ctrlpvim/ctrlp.vim' " Active fork of kien/ctrlp.vim—Fuzzy file, buffer, mru, tag, etc finder.
Plug 'sheerun/vim-polyglot' " A solid language pack for Vim.
Plug 'junegunn/fzf', { 'dir': '/opt/apps/gnu+linux/bin/fzf', 'do': './install --all' } " A command-line fuzzy finder.
Plug 'junegunn/fzf.vim' " Vim plugin for FZF: a command-line fuzzy finder. TODO estudar mais este plugin. Ele é muito bom!
Plug 'junegunn/goyo.vim' " Distraction-free writing in Vim .
Plug 'junegunn/limelight.vim' " Hyperfocus-writing in VimHyperfocus-writing in Vim.
Plug 'mbbill/undotree' " The ultimate undo history visualizer for VIM

" Color schemes and icons
Plug 'godlygeek/csapprox' " (old: vim-scripts/CSApprox) Make gvim-only colorschemes work transparently in terminal vim.
Plug 'tomasr/molokai' " Molokai color scheme for Vim.
Plug 'junegunn/seoul256.vim' " Low-contrast Vim color scheme based on Seoul Colors.
Plug 'joshdick/onedark.vim' " A dark Vim/Neovim color scheme inspired by Atom's One Dark syntax theme.
Plug 'chriskempson/base16-vim' " Base16 for Vim.
Plug 'mhinz/vim-janah' " A dark colorscheme for Vim.
Plug 'nanotech/jellybeans.vim', { 'tag': 'v1.6' } " A colorful, dark color scheme for Vim.
Plug 'ryanoasis/vim-devicons'  " Adds file type glyphs/icons to popular Vim plugins...
Plug 'romainl/Apprentice'

" Git
Plug 'tpope/vim-fugitive' " a Git wrapper so awesome, it should be illegal.
Plug 'tpope/vim-rhubarb' " GitHub extension for fugitive.vim
Plug 'shumphrey/fugitive-gitlab.vim' " An extension to fugitive.vim for gitlab support
Plug 'gregsexton/gitv', {'on': ['Gitv']} " gitk for Vim.
Plug 'airblade/vim-gitgutter' " A Vim plugin which shows a git diff in the gutter (sign column) and stages/undoes hunks.
Plug 'Xuyuanp/nerdtree-git-plugin' " A plugin of NERDTree showing git status.

" Helps mainly with software development
"Plug 'vim-syntastic/syntastic' " Syntax checking hacks for vim. (conflicts with 'w0rp/ale')
"Plug 'bronson/vim-trailing-whitespace' " Highlights trailing whitespace in red and provides :FixWhitespace to fix it. ('w0rp/ale' do the same)
Plug 'scrooloose/nerdcommenter' " Vim plugin for intensely orgasmic commenting.
Plug 'Yggdroot/indentLine' " Display the indention levels with thin vertical lines.
Plug 'junegunn/vim-easy-align' " A Vim alignment plugin. # TODO estudar
"Plug 'tpope/vim-surround' " Quoting/parenthesizing made simple. # TODO conferir se preciso ou se o outro plugin é melhor
Plug 'SirVer/ultisnips' " The ultimate snippet solution for Vim.
Plug 'honza/vim-snippets' " Snippets files for various programming languages.
Plug 'ervandew/supertab' " Perform all your vim insert mode completions with Tab.
Plug 'ludovicchabant/vim-gutentags' " A Vim plugin that manages your tag files.
Plug 'majutsushi/tagbar' " Displays tags in a window, ordered by scope.
if !executable("ctags")
  echoerr "Install exuberant-ctags in order to use tagbar plugin!"
endif
" A code-completion engine for Vim.
" 2017-11-27 - Tobias - PHP support is insufficient.
" Must have: apt-get install build-essential cmake python-dev python3-dev
" Nice to have: apt-get install golang nodejs npm
"Plug 'Valloric/YouCompleteMe', { 'do': './install.py --go-completer --js-completer' }
Plug 'w0rp/ale' " Asynchronous Lint Engine.

" For specific languages.
" expand('%:p:h') means the directory where .vimrc is, as my .vimrc
" is usually a symbolic link for my 'dotfiles' directory.
Plug 'iamcco/markdown-preview.vim' " Real-time markdown preview plugin for vim.
"Plug 'plasticboy/vim-markdown' " TODO estudar.
"Plug 'ekalinin/Dockerfile.vim' " Vim syntax file & snippets for Docker's Dockerfile.
"if filereadable(expand('%:p:h') . '/plugins/php.vimrc')
if filereadable(expand('~/.vim/plugins/php.vimrc'))
  source %:p:h/plugins/php.vimrc
endif
" Isto nao esta funcionando, pois nao carrega as opcoes do vim-go
"if filereadable(expand('~/.vim/plugins/go.vimrc'))
  "source $HOME/.vim/plugins/go.vimrc
"endif
Plug 'fatih/vim-go'

" Initialize plugin system
call plug#end()

" Initialize plugin system
call plug#end()


"""""""""""""""""""""""""""""""
"                             "
"    General configurations   "
"                             "
"""""""""""""""""""""""""""""""
" http://stackoverflow.com/questions/5845557/in-a-vimrc-is-set-nocompatible-completely-useless
set nocompatible

" Enable hidden buffers
set hidden

" Enable filetype detection, plugin and indent loading for specific file
" types.
filetype plugin indent on

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

"" Copy/Paste/Cut
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif

" Recarrega automaticamente arquivos que foram alterados no disco
set autoread

"" Encoding
set encoding=utf-8
"set fileencoding=utf-8
set fileencodings=utf-8
set bomb
set binary
set ttyfast

"" Fix backspace indent
set backspace=indent,eol,start

" Força a exibição de caracteres não imprimíveis
"set listchars=tab:⇨\ ,eol:⏎,nbsp:☠,trail:•,extends:⟩,precedes:⟨
set listchars=tab:⇨\ ,nbsp:☠,trail:•,extends:⟩,precedes:⟨
set list

" Make File-Open track directory of current file
set browsedir=buffer

"Keep backups of files in case I mess up :)
set backup
set backupcopy=yes
set backupdir=$HOME/.vim/backup
if !isdirectory(expand('~/.vim/backup'))
  call mkdir(expand('~/.vim/backup'), "p")
endif

" Where store swap files.
set directory=$HOME/.vim/swap//,.
if !isdirectory(expand('~/.vim/swap'))
  call mkdir(expand('~/.vim/swap'), "p")
endif

" Persistent undo
set undodir=$HOME/.vim/undodir/
set undofile

" Enable spell checking.
" TODO enable spell checking only in a few file types
"if !filereadable(expand('~/.vim/spell/en.utf-8.sug'))
  "echo "Downloading spell files..."
  "echo ""
  "silent !\curl -fLo ~/.vim/spell/en.utf-8.sug --create-dirs http://ftp.vim.org/vim/runtime/spell/en.utf-8.sug
  "silent !\curl -fLo ~/.vim/spell/en.utf-8.spl --create-dirs http://ftp.vim.org/vim/runtime/spell/en.utf-8.spl

  "silent !\curl -fLo ~/.vim/spell/pt.utf-8.sug --create-dirs http://ftp.vim.org/vim/runtime/spell/pt.utf-8.sug
  "silent !\curl -fLo ~/.vim/spell/pt.utf-8.spl --create-dirs http://ftp.vim.org/vim/runtime/spell/pt.utf-8.spl
"endif
"set spell
"set spellfile=$HOME/.vim/spell/en.utf-8.add,$HOME/.vim/spell/pt.utf-8.add
"set spelllang=en,pt


"""""""""""""""""""""""""""""""
"                             "
"           Screen            "
"                             "
"""""""""""""""""""""""""""""""
syntax on
set ruler  " shows cursor position
set number " shows line number

"set mouse=a
set mousemodel=popup
set t_Co=256
set guioptions=egmrti
set gfn=Hack\ 12
set signcolumn=yes " Always show sign column.

" If you prefer the scheme to match the original monokai background color.
let g:molokai_original = 1
" Alternative scheme under development for color terminals which attempts to bring the 256
" color version as close as possible to the the default (dark) GUI version.
"let g:rehash256 = 1
colorscheme molokai
if &diff
    colorscheme apprentice
endif

" Matches the terminal colors
set termguicolors

if $COLORTERM == 'gnome-terminal'
  set term=gnome-256color
else
  if $TERM == 'xterm'
    set term=xterm-256color
  endif
endif

if &term =~ '256color'
  set t_ut=
endif

"" Disable the blinking cursor.
set gcr=a:blinkon0
set scrolloff=3

"" Status bar
set laststatus=2

"" Use modeline overrides
set modeline
set modelines=10

set title
set titleold="Terminal"
set titlestring=%F
" This is nice, but makes scrolling very slow
"set title titlestring=...%{strpart(expand(\"%:p:h\"),stridx(expand(\"%:p:h\"),\"/\",strlen(expand(\"%:p:h\"))-12))}%=%n.\ \ %{expand(\"%:t:r\")}\ %m\ %Y\ \ \ \ %l\ of\ %L " [ref05]

set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\

if exists("*fugitive#statusline")
  set statusline+=%{fugitive#statusline()}
endif

" ? Exibe parte do comando na linha de status
set showcmd

" Exibe o modo atual
set showmode

" Define um texto na barra de status
set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set statusline+=%{fugitive#statusline()}

" Faz com que o vim pule para a posição no arquivo onde se parou na última
" fez que ele foi aberto
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Quando um bracket eh inserido, saltar rapidamente para o seu primeiro
" correspondente. O salto só ocorre se o correspondente pode ser visto na
" tela atual. Para definir por quanto tempo o salto ocorrera, use 'matchtime'
set showmatch
set colorcolumn=121 " Exibe uma marca na coluna especificada. Ajuda a alinhar o texto.
set cursorline " Destaca a linha onde o cursor está.

" Searching {{{
" Igora case sensitive durante as buscas
set ignorecase
" Ignora a opcao 'ignorecase' se o texto a ser buscado contem caracteres
" maiusculos
set smartcase
" Quando há uma padrao de uma pesquisa anterior, destaque todos os resultados
set hlsearch
" Busca incremental. Vai buscando e mostrando os resultados conforme se
" vai digitando o texto a buscar.
set incsearch
"}}}

" Default indent with tabs. [ref 08] {{{
" Changes the width of the TAB character.
"set tabstop=4
" Affects what happens when you press >>, << or ==. It also affects how
" automatic indentation works.
"set shiftwidth=4
" Affects what happens when you press the <TAB> or <BS> keys.
" Its default value is the same as the value of 'tabstop'.
"set softtabstop=0
" Affects what happens when you press the <TAB> key.
" If 'expandtab' is set, pressing the <TAB> key will always
" insert 'softtabstop' amount of space characters.
" Otherwise, the amount of spaces inserted is minimized
" by using TAB characters.
"set expandtab
"}}}

" Configure vimdiff
if &diff
    colorscheme apprentice

    set diffopt+=iwhite
    set diffexpr=""
endif

" Ignore whitespace on diff
" https://stackoverflow.com/a/4271247/4668660
"set diffopt+=iwhite
"set diffexpr=DiffW()
"function DiffW()
  "let opt = ""
   "if &diffopt =~ "icase"
     "let opt = opt . "-i "
   "endif
   "if &diffopt =~ "iwhite"
     "let opt = opt . "-w " " swapped vim's -b with -w
   "endif
   "silent execute "!diff -a --binary " . opt .
     "\ v:fname_in . " " . v:fname_new .  " > " . v:fname_out
"endfunction


""""""""""""""""""""""""""""""""""""""""""
"                                        "
"              Keys mapping              "
"                                        "
""""""""""""""""""""""""""""""""""""""""""
" The idea with this function is to be like a complete refresh of vim.
if !exists('*MyReload')
  function! MyReload()
    echom "Reloading VIM..."
    source ~/.vimrc " Reload vimrc
    filetype detect " force file type detection
    echom "VIM reloaded."
  endfunction
endif
nnoremap <F5> :call MyReload()<CR>

" Leader key
"let mapleader=","
"let g:mapleader=","
" [ref 07]
map <space> <leader>
map <space><space> <leader><leader>

"Ao inves de usar : use ; que nao precisa do shift
nnoremap ; :

" Avoid some common mistakes
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

" Save current file [09]
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

" Execute current file
nnoremap <leader>r :!"%:p"<CR>

"Working with buffers
" Lista os buffers com o FZF
nnoremap <silent> <leader>b :Buffers<CR>
" Executa fzf -m que exibe os arquivos no diretorio atual
nnoremap <silent> <leader>e :FZF -m<CR>
" Buffer nav
noremap <leader>z :bp<CR>
noremap <leader>q :bp<CR>
noremap <leader>x :bn<CR>
noremap <leader>w :bn<CR>
" Close buffer
noremap <leader>c :bd<CR>

" TODO O que isto faz?
"cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" ,p alterna o modo paste
" parece que é melhor que pastetoggle
"nmap <leader>p :set paste!<BAR>set paste?<CR>
noremap YY "+y<CR>
noremap <leader>p "+gP<CR>
noremap XX "+x<CR>

" cd. muda para o diretorio do arquivo atual
"cmap cd. lcd %:p:h

" Faz com que blocos selecionados sejam reselecionados após identações
vnoremap < <gv
vnoremap > >gv

" abre o console de erro
"map <leader>cc :botright cope<CR>

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Split
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

" Git
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>gsh :Gpush<CR>
noremap <Leader>gll :Gpull<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>
nnoremap <Leader>go :.Gbrowse<CR>

" Diff
noremap <Leader>dgr :diffget RE<CR>
noremap <Leader>dgb :diffget BA<CR>
noremap <Leader>dgl :diffget LO<CR>

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

" Tabs
nnoremap <Tab> gt
nnoremap <S-Tab> gT
nnoremap <silent> <S-t> :tabnew<CR>

" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

" Clean search (highlight)
nnoremap <silent> <leader><space> :noh<cr>

" Switching windows
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" SmartHome
" Pressing the Home key moves the cursor to the first nonblank character on
" the line, or, if already at that position, to the start of the line.
function! SmartHome()
  let first_nonblank = match(getline('.'), '\S') + 1
  if first_nonblank == 0
    return col('.') + 1 >= col('$') ? '0' : '^'
  endif
  if col('.') == first_nonblank
    return '0'  " if at first nonblank, go to start line
  endif
  return &wrap && wincol() > 1 ? 'g^' : '^'
endfunction
noremap <expr> <silent> <Home> SmartHome()
imap <silent> <Home> <C-O><Home>


"""""""""""""""""""""""""""""""
"                             "
"    Plugins configuration    "
"                             "
"""""""""""""""""""""""""""""""
" # TODO key mappings of plugins go to here

" NERDTree configuration
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 50
let g:nerdtree_tabs_open_on_gui_startup = 0 " Show vim-startify in a new gvim window without files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
nnoremap <silent> <F2> :NERDTreeFind<CR>
nnoremap <silent> <F3> :NERDTreeToggle<CR>

" vim-airline
" From: vim-bootstrap:
let g:airline_theme = 'powerlineish'
"let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#ale#enabled = 1 " enable support for w0rp/ale in vimairline
"
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
if !exists('g:airline_powerline_fonts')
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_left_sep          = '▶'
  let g:airline_left_alt_sep      = '»'
  let g:airline_right_sep         = '◀'
  let g:airline_right_alt_sep     = '«'
  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
  let g:airline#extensions#readonly#symbol   = '⊘'
  let g:airline#extensions#linecolumn#prefix = '¶'
  let g:airline#extensions#paste#symbol      = 'ρ'
  let g:airline_symbols.linenr    = '␊'
  let g:airline_symbols.branch    = '⎇'
  let g:airline_symbols.paste     = 'ρ'
  let g:airline_symbols.paste     = 'Þ'
  let g:airline_symbols.paste     = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
else
  let g:airline#extensions#tabline#left_sep = ''
  let g:airline#extensions#tabline#left_alt_sep = ''

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
endif

" syntastic
" From docs:
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"" From vim-bootstrap:
"let g:syntastic_error_symbol='✗'
"let g:syntastic_warning_symbol='⚠'
"let g:syntastic_style_error_symbol = '✗'
"let g:syntastic_style_warning_symbol = '⚠'
"let g:syntastic_aggregate_errors = 1

" majutsushi/tagbar
if !executable("ctags")
" #TODO use https://github.com/universal-ctags/ctags
  echoerr "Install exuberant-ctags in order to use tagbar plugin!"
endif
nmap <silent> <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" ludovicchabant/vim-gutentags
let g:gutentags_cache_dir = '~/.vim/gutentags'
let g:gutentags_ctags_exclude = ['*.css', '*.html', '*.js']

" Yggdroot/indentLine
let g:indentLine_enabled = 1
let g:indentLine_concealcursor = 0
let g:indentLine_char = '⁞'
let g:indentLine_faster = 1

" SirVer/ultisnips
"let g:UltiSnipsExpandTrigger="<tab>" " #TODO configurar uma tecla. Nao nao pode pois uso o youcompleteme
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"

" vimshell.vim
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_prompt =  '$ '
" terminal emulation
nnoremap <silent> <leader>sh :VimShellCreate<CR>

" YouCompleteMe
"nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
"let g:ycm_always_populate_location_list = 1

" xolox/vim-session
let g:session_directory = "~/.vim/session"
let g:session_autoload = "no"
let g:session_autosave = "no"
let g:session_command_aliases = 1

" tpope/vim-fugitive
" The following autocommand will cause the quickfix window to open after any grep invocation
autocmd QuickFixCmdPost *grep* cwindow

" tpope/vim-rhubarb
"let g:github_enterprise_urls = ['https://example.com']

" fugitive-gitlab.vim
"let g:fugitive_gitlab_domains = ['http://gitlab.com']

" fzf.vim
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" The Silver Searcher
" https://github.com/ggreer/the_silver_searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
else
    echoerr "Execute: sudo apt install silversearcher-ag"
endif

" ripgrep
" https://github.com/BurntSushi/ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

" iamcco/markdown-preview.vim {{{
" path to the chrome or the command to open chrome(or other modern browsers)
" if set, g:mkdp_browserfunc would be ignored
let g:mkdp_path_to_chrome = "/usr/bin/firefox"

" callback vim function to open browser, the only param is the url to open
let g:mkdp_browserfunc = 'MKDP_browserfunc_default'

" set to 1, the vim will open the preview window once enter the markdown
" buffer
let g:mkdp_auto_start = 0

" set to 1, the vim will auto open preview window when you edit the
" markdown file
let g:mkdp_auto_open = 0

" set to 1, the vim will auto close current preview window when change
" from markdown buffer to another buffer
let g:mkdp_auto_close = 1

" set to 1, the vim will just refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it just can be use in markdown file
let g:mkdp_command_for_global = 0

nmap <silent> <F8> <Plug>MarkdownPreview        " for normal mode
imap <silent> <F8> <Plug>MarkdownPreview        " for insert mode
nmap <silent> <F9> <Plug>StopMarkdownPreview    " for normal mode
imap <silent> <F9> <Plug>StopMarkdownPreview    " for insert mode
"}}}

" ctrlpvim/ctrlp.vim
map <silent> <leader>jd :CtrlPTag<cr><c-\>w

" w0rp/ale
"let g:ale_fix_on_save = 1 " fix files automatically on save.
"let g:ale_completion_enabled = 1 " By now only TypeScript is supported.
"let g:ale_sign_column_always = 1 " keep the sign gutter open at all times
let g:ale_echo_msg_error_str = 'E' " is the string used for error severity.
let g:ale_echo_msg_warning_str = 'W' " is the string used for warning severity.
let g:ale_echo_msg_format = '[%linter%] [%severity%] %s' " the format of message echoed by ALE.
"let g:ale_set_loclist = 0 " Toggle the loclist use.
"let g:ale_set_quickfix = 1 " Toggle the quickfix use.
"let g:ale_open_list = 1 " Oppen quickfix when ALE detects errors/warnings.
"let g:ale_keep_list_window_open = 1 " Keep the window open even after errors disappear.

" junegunn/limelight.vim
autocmd! User GoyoEnter Limelight
" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

" mbbill/undotree
let g:undotree_WindowLayout = 2
let g:undotree_SetFocusWhenToggle = 1

" airblade/vim-gitgutter
let g:gitgutter_max_signs = 500  " 500 is the default value
"let g:gitgutter_highlight_lines = 1 " To turn on line highlighting by default
" If you experience a lag, you can trade speed for accuracy:
"let g:gitgutter_realtime = 0
"let g:gitgutter_eager = 0


"""""""""""""""""""""""""""""""
"                             "
"        Main References      "
"                             "
"""""""""""""""""""""""""""""""
" 04 https://github.com/avelino/vim-bootstrap/blob/master/vim_template/vimrc
" 05 https://coderwall.com/p/lznfyw/better-title-string-for-vim
" 06 http://vim.wikia.com/wiki/VimTip315
" 07 https://www.reddit.com/r/vim/comments/1vdrxg/space_is_a_big_key_what_do_you_map_it_to/
" 08 http://vim.wikia.com/wiki/Indenting_source_code
" 09 http://vim.wikia.com/wiki/Map_Ctrl-S_to_save_current_or_new_files

"EOF
