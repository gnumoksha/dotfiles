""""""""""""""""""""""""""""""""""""""""""
"                                        "
"   Arquivo de configuracao para o VIM   "
"                                        "
""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""
"                             "
" Carrega arquivos externos   "
" necessários (i.e. plugins)  "
"                             "
"""""""""""""""""""""""""""""""
let vimplug_exists=expand('~/.vim/autoload/plug.vim')

if !filereadable(vimplug_exists)
  if !executable("curl")
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent !\curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

  autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree' " A tree explorer plugin for vim.
Plug 'jistr/vim-nerdtree-tabs' " #TODO this plugin is not necessary https://github.com/scrooloose/nerdtree#faq
Plug 'vim-syntastic/syntastic' " Syntax checking hacks for vim.
Plug 'bronson/vim-trailing-whitespace' " Highlights trailing whitespace in red and provides :FixWhitespace to fix it.
Plug 'mhinz/vim-startify' " The fancy start screen for Vim.
Plug 'scrooloose/nerdcommenter' " Vim plugin for intensely orgasmic commenting.
Plug 'vim-airline/vim-airline' " lean & mean status/tabline for vim that's light as air.
Plug 'vim-airline/vim-airline-themes' " A collection of themes for vim-airline.
Plug 'Yggdroot/indentLine' " Display the indention levels with thin vertical lines.
Plug 'Shougo/vimshell.vim' " Powerful shell implemented by vim.
Plug 'SirVer/ultisnips' " The ultimate snippet solution for Vim
Plug 'honza/vim-snippets' " Snippets files for various programming languages.
Plug 'Shougo/vimproc.vim', { 'do': 'make' } " Interactive command execution in Vim.
Plug 'xolox/vim-misc' " Miscellaneous auto-load Vim scripts.
Plug 'xolox/vim-session' " Extended session management for Vim (:mksession on steroids).
Plug 'iamcco/markdown-preview.vim' " Real-time markdown preview plugin for vim.

Plug 'majutsushi/tagbar' " Displays tags in a window, ordered by scope.
if !executable("ctags")
    echoerr "Install exuberant-ctags in order to use tagbar plugin!"
endif

" A code-completion engine for Vim.
" Required: apt-get install build-essential cmake python-dev python3-dev
" Bonus: apt-get install golang nodejs npm
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --go-completer --js-completer' }

Plug 'junegunn/fzf', { 'dir': '/opt/_apps/_gnu+linux/_bin/fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Git
Plug 'tpope/vim-fugitive' " a Git wrapper so awesome, it should be illegal.
Plug 'gregsexton/gitv', {'on': ['Gitv']} " gitk for Vim.
Plug 'airblade/vim-gitgutter' " A Vim plugin which shows a git diff in the gutter (sign column) and stages/undoes hunks.
Plug 'Xuyuanp/nerdtree-git-plugin'

" Colors
Plug 'vim-scripts/CSApprox' " Make gvim-only colorschemes work transparently in terminal vim.
Plug 'nanotech/jellybeans.vim', { 'tag': 'v1.6' }
Plug 'mhinz/vim-janah'
Plug 'chriskempson/base16-vim'
Plug 'tomasr/molokai'

" Syntax
Plug 'sheerun/vim-polyglot' " A solid language pack for Vim.
"Plug 'ekalinin/Dockerfile.vim' " Vim syntax file & snippets for Docker's Dockerfile.

" PHP
" StanAngeloff/php.vim is loaded by vim-polyglot.
Plug 'shawncplus/phpcomplete.vim'
Plug 'arnaud-lb/vim-php-namespace'
"Plug 'vim-php/vim-php-refactoring'
"Plug 'vim-php/tagbar-phpctags.vim'
"Plug 'vim-php/vim-composer'
"Plug 'wdalmut/vim-phpunit.git'

" Initialize plugin system
call plug#end()


"""""""""""""""""""""""""""""""
"                             "
"     Definições genéricas    "
"                             "
"""""""""""""""""""""""""""""""
" http://stackoverflow.com/questions/5845557/in-a-vimrc-is-set-nocompatible-completely-useless
set nocompatible

" Recarrega o vim automaticamente quando editando o vimrc
autocmd! bufwritepost .vimrc source ~/.vimrc

" Enable hidden buffers
set hidden

" Diz ao vim para carregar ??
" Este parametro é obrigatorio para este arquivo funcionar.
filetype plugin on

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

"" Copy/Paste/Cut
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif

" Recarrega automaticamente arquivos que foram alterados no disco
set autoread

"" Encoding
set encoding=utf-8
"set fileencoding=utf-8
set fileencodings=utf-8
set bomb
set binary
set ttyfast

"" Fix backspace indent
set backspace=indent,eol,start

" Força a exibição de caracteres não imprimíveis
set listchars=tab:⇨\ ,eol:⏎,nbsp:☠,trail:•,extends:⟩,precedes:⟨
set list



"""""""""""""""""""""""""""""""
"             Tela            "
"""""""""""""""""""""""""""""""
syntax on
set ruler  " shows cursor position
set number " shows line number

"set mouse=a
set mousemodel=popup
set t_Co=256
set guioptions=egmrti
set gfn=Hack\ 12

let no_buffers_menu=1
colorscheme molokai

if has("gui_running")
  if has("gui_mac") || has("gui_macvim")
    set guifont=Menlo:h12
    set transparency=7
  endif
else
  let g:CSApprox_loaded = 1

  " IndentLine
  let g:indentLine_enabled = 1
  let g:indentLine_concealcursor = 0
  let g:indentLine_char = '┆'
  let g:indentLine_faster = 1

  if $COLORTERM == 'gnome-terminal'
    set term=gnome-256color
  else
    if $TERM == 'xterm'
      set term=xterm-256color
    endif
  endif

endif

if &term =~ '256color'
  set t_ut=
endif

"" Disable the blinking cursor.
set gcr=a:blinkon0
set scrolloff=3

"" Status bar
set laststatus=2

"" Use modeline overrides
set modeline
set modelines=10

set title
set titleold="Terminal"
set title titlestring=...%{strpart(expand(\"%:p:h\"),stridx(expand(\"%:p:h\"),\"/\",strlen(expand(\"%:p:h\"))-12))}%=%n.\ \ %{expand(\"%:t:r\")}\ %m\ %Y\ \ \ \ %l\ of\ %L " ref05

set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\

if exists("*fugitive#statusline")
  set statusline+=%{fugitive#statusline()}
endif

" ? Exibe parte do comando na linha de status
set showcmd

" Exibe o modo atual
set showmode

" Define um texto na barra de status
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set statusline+=%{fugitive#statusline()}

" ? Iniciar a wild expansion na linha de comando usando <Tab>
"set wildmenu
"set wildchar=<TAB>

" Faz com que o vim pule para a posição no arquivo onde se parou na última
" fez que ele foi aberto
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" copia a indentação anterior na auto indentação
set copyindent
" Quando um bracket eh inserido, saltar rapidamente para o seu primeiro
" correspondente. O salto só ocorre se o correspondente pode ser visto na
" tela atual. Para definir por quanto tempo o salto ocorrera, use 'matchtime'
set showmatch
" Define a largura do texto, em numero de caracteres
"set textwidth=79
" Coluna 80 colorida
set colorcolumn=80
" Destaca a linha atual
set cursorline

" Searching
"{
" Igora case sensitive durante as buscas
set ignorecase
" Ignora a opcao 'ignorecase' se o texto a ser buscado contem caracteres
" maiusculos
set smartcase
" Quando há uma padrao de uma pesquisa anterior, destaque todos os resultados
set hlsearch
" Busca incremental. Vai buscando e mostrando os resultados conforme se
" vai digitando o texto a buscar.
set incsearch
"}

" Espaços no lugar de Tab
"{
" numero de espacos que <Tab>
set tabstop=4
" numero de espacos a ser utilizado em cada autoindentação
set shiftwidth=4
" ?
set softtabstop=0
" Use o numero apropriado de espacos para inserir um <Tab>. Os
" espacos sao utilizados em indentacoes com os comandos '<' e '>'
" e quando 'autoindent' esta ligado. Para inserir uma tabulacao
" real quando 'expandtab' esta ligado, use Ctrl-V <Tab>
set expandtab
"}

""""""""""""""""""""""""""""""""""""""""""
"                                        "
"              Keys mapping              "
"                                        "
""""""""""""""""""""""""""""""""""""""""""

" <leader>cb = comment
" <leader> c<space> = uncomment
" F2 = nerdtree find
" F3 = nerdtree toggle
" F4 = tags (symbols)
" F8 = Markdown preview
" F9 = Markdown preview

" Define o leader (prefixo de comando) para ,
let mapleader=","
let g:mapleader=","

"Ao inves de usar : use ; que nao precisa do shift
nnoremap ; :

"" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

" ,p alterna o modo paste
" parece que é melhor que pastetoggle
"nmap <leader>p :set paste!<BAR>set paste?<CR>
noremap YY "+y<CR>
noremap <leader>p "+gP<CR>
noremap XX "+x<CR>

" cd. muda para o diretorio do arquivo atual
"cmap cd. lcd %:p:h

" Faz com que blocos selecionados sejam reselecionados após identações
vnoremap < <gv
vnoremap > >gv

" nova aba
"map <C-t><C-t> :tabnew<CR>
" fecha aba
"map <C-t><C-w> :tabclose<CR>

" abre o console de erro
"map <leader>cc :botright cope<CR>

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Split
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

" Git
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>gsh :Gpush<CR>
noremap <Leader>gll :Gpull<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

" Tabs
nnoremap <Tab> gt
nnoremap <S-Tab> gT
nnoremap <silent> <S-t> :tabnew<CR>

" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Buffer nav
noremap <leader>z :bp<CR>
noremap <leader>q :bp<CR>
noremap <leader>x :bn<CR>
noremap <leader>w :bn<CR>

" Close buffer
noremap <leader>c :bd<CR>

" Clean search (highlight)
nnoremap <silent> <leader><space> :noh<cr>

" Switching windows
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv


"""""""""""""""""""""""""""""""
"                             "
"    Plugins configuration    "
"                             "
"""""""""""""""""""""""""""""""
" # TODO passar os mapeamentos para a area de mapeamentos?

" NERDTree configuration
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 50
let g:nerdtree_tabs_open_on_gui_startup = 0 " Show vim-startify in a new gvim window without files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
nnoremap <silent> <F2> :NERDTreeFind<CR>
nnoremap <silent> <F3> :NERDTreeToggle<CR>

" vim-airline
" From: vim-bootstrap:
let g:airline_theme = 'powerlineish'
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1
"
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
if !exists('g:airline_powerline_fonts')
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_left_sep          = '▶'
  let g:airline_left_alt_sep      = '»'
  let g:airline_right_sep         = '◀'
  let g:airline_right_alt_sep     = '«'
  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
  let g:airline#extensions#readonly#symbol   = '⊘'
  let g:airline#extensions#linecolumn#prefix = '¶'
  let g:airline#extensions#paste#symbol      = 'ρ'
  let g:airline_symbols.linenr    = '␊'
  let g:airline_symbols.branch    = '⎇'
  let g:airline_symbols.paste     = 'ρ'
  let g:airline_symbols.paste     = 'Þ'
  let g:airline_symbols.paste     = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
else
  let g:airline#extensions#tabline#left_sep = ''
  let g:airline#extensions#tabline#left_alt_sep = ''

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
endif

" syntastic
" From docs:
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" From vim-bootstrap:
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'
let g:syntastic_aggregate_errors = 1

" Tagbar
nmap <silent> <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" indentLine
let g:indentLine_char = '⁞'

" SirVer/ultisnips
"let g:UltiSnipsExpandTrigger="<tab>" " #TODO configurar uma tecla. Nao nao pode pois uso o youcompleteme
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"

" vimshell.vim
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_prompt =  '$ '
" terminal emulation
nnoremap <silent> <leader>sh :VimShellCreate<CR>

" YouCompleteMe
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
let g:ycm_always_populate_location_list = 1

" xolox/vim-session
let g:session_directory = "~/.vim/session"
let g:session_autoload = "no"
let g:session_autosave = "no"
let g:session_command_aliases = 1

" fzf.vim
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>e :FZF -m<CR>
"O que isto faz?
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" The Silver Searcher
" https://github.com/ggreer/the_silver_searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
else
    echoerr "Execute: sudo apt install silversearcher-ag"
endif

" ripgrep
" https://github.com/BurntSushi/ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

" iamcco/markdown-preview.vim {{{
" path to the chrome or the command to open chrome(or other modern browsers)
" if set, g:mkdp_browserfunc would be ignored
let g:mkdp_path_to_chrome = "/opt/_apps/_gnu+linux/_internet/firefox/firefox"

" callback vim function to open browser, the only param is the url to open
let g:mkdp_browserfunc = 'MKDP_browserfunc_default'

" set to 1, the vim will open the preview window once enter the markdown
" buffer
let g:mkdp_auto_start = 0

" set to 1, the vim will auto open preview window when you edit the
" markdown file
let g:mkdp_auto_open = 0

" set to 1, the vim will auto close current preview window when change
" from markdown buffer to another buffer
let g:mkdp_auto_close = 1

" set to 1, the vim will just refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it just can be use in markdown file
let g:mkdp_command_for_global = 0

nmap <silent> <F8> <Plug>MarkdownPreview        " for normal mode
imap <silent> <F8> <Plug>MarkdownPreview        " for insert mode
nmap <silent> <F9> <Plug>StopMarkdownPreview    " for normal mode
imap <silent> <F9> <Plug>StopMarkdownPreview    " for insert mode
"}}}

" StanAngeloff/php.vim (loaded by vim-polyglot)
function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction
augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

"""""""""""""""""""""""""""""""
"                             "
"           References        "
"                             "
"""""""""""""""""""""""""""""""
" 05 https://coderwall.com/p/lznfyw/better-title-string-for-vim

"EOF
