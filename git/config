############################
#                          #
#    GIT configurations    #
#                          #
############################

[user]
	name = Tobias Sette
	email = contato@tobias.ws
	signingkey = E724F606EFFF66F7

[github]
	user = gnumoksha

[color]
	# [4]
	diff = auto
	grep = auto
	interactive = auto
	status = auto
	branch = auto
	status = auto

[diff]
	# [0] [1] [2] [3]
	#external = /home/tobias/outros/softwares/instalados/scripts/git_diff.sh
	# meld | diffuse | kompare | kdiff3
	# diffmerge | bcompare
	tool = meld
	guitool = meld

[diff "exif"]
	# For more comprehensive diff
	# https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes
	textconv = exiftool

[core]
	editor = vim
	autocrlf = input # valor 'true' causou erro no zsh: "command not found: ^M"
	
[merge]
	# [5]
	tool = meld
	# deleta os arquivos de backup após o merge ser resolvido
	keepBackup = false

[merge "ours"]
	# Merge strategy
	# https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes#Merge-Strategies
	driver = true

[branch "master"]
	rebase = true

[push]
	default = matching

[gui]
	editor = gedit

[alias]
	# comuns [8]
	co = checkout
	ci = commit
	st = status
	br = branch
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	type = cat-file -t
	dump = cat-file -p
	# [9]
	last = log -1 HEAD

	# genericos
	send = push origin master
	add-all = add --all
	go = checkout
	undo-changes = reset --hard
	f = fetch --all
	
	# quero apenas os arquivos para usar o software :)
	# Fonte: git clone --help
	my-download = clone --depth=1 --shallow-submodules --recurse-submodules
	my-download-all-branches = !git download --no-single-branch

	my-cherry-pick = cherry-pick -x

	my-log-changes = !git log -p -m --first-parent -30
	# [10]
	showtool = "!showci () { rev=$(git rev-parse \"${*:-HEAD}\"); git difftool $rev~1 $rev; }; showci"

	# automacao do projeto [6]
	changed-specs = !git diff --name-only master -- spec | egrep '.rb'
	run-changed-specs = !zeus rspec `git changed-specs`
	changed-files = !git diff --name-only master | cat

	unpushed = log @{push}..

	# analise de dados [6]
	authors = !git log --format="%aN"
	unique-authors = !git authors | sort -u
	ranked-authors = !git authors | sort | uniq -c | sort -n
	emails = !git log --format="%aE"
	email-domains = !git log --format="%aE" | awk -F'@' '{print $2}'
	unique-email-domains = !git email-domains | sort -u
	ranked-email-domains = !git email-domains | sort | uniq -c | sort -n
	one-week = !git diff --stat `git log --since='1 week' --format=%H | tail -1`

[svn]
	# [7]
	rmdir = true
	
[cola]
	spellcheck = false


############################
#                          #
#         Referências      #
#                          #
############################
# [0] http://mycomputeradventures.blogspot.com.br/2012/08/git-external-diff-merge-tools_30.html
# [1] http://technotales.wordpress.com/2009/05/17/git-diff-with-vimdiff/
# [2] http://jeetworks.org/node/90
# [3] http://stackoverflow.com/questions/255202/how-do-i-view-git-diff-output-with-a-visual-diff-program
# [4] http://fellipe.com/blog/definindo-configuracoes-do-gitconfig-apos-a-instalacao-do-git/
# [5] http://meldmerge.org/help/resolving-conflicts.html
# [6] https://github.com/sdball/dotfiles/blob/master/.gitconfig
# [7] https://git.wiki.kernel.org/index.php/Git-svn
# [8] https://githowto.com/aliases
# [9] https://git-scm.com/book/tr/v2/Git-Basics-Git-Aliases
# [10] http://stackoverflow.com/questions/17558221/how-can-i-view-the-output-of-git-show-in-a-diff-viewer-like-meld-kdiff3-etc

#EOF
