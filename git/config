############################
#                          #
#    GIT configurations    #
#                          #
############################

[user]
	name = Tobias Sette
	email = contato@tobias.ws
	signingkey = E724F606EFFF66F7

[github]
	user = gnumoksha

[color]
	# [4]
	diff = auto
	grep = auto
	interactive = auto
	status = auto
	branch = auto
	status = auto
	ui = true

[diff]
	# [0] [1] [2] [3]
	#external = /home/tobias/outros/softwares/instalados/scripts/git_diff.sh
	# meld | diffuse | kompare | kdiff3
	# diffmerge | bcompare
	tool = meld
	guitool = meld
	submodule = log

[diff "exif"]
	# For more comprehensive diff
	# https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes
	textconv = exiftool

[core]
	editor = vim
	autocrlf = input # valor 'true' causou erro no zsh: "command not found: ^M"
	
[merge]
	# [5]
	tool = meld
	# deleta os arquivos de backup após o merge ser resolvido
	keepBackup = false

[merge "ours"]
	# Merge strategy
	# https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes#Merge-Strategies
	driver = true

[status]
	submodulesummary = 1
	
[rebase]
	autoStash = true

[pull]
	# https://stackoverflow.com/a/30209750/4668660
	rebase = true
	
[push]
	default = matching
	# sempre envia as tags com anotacao referenciadas pelo branch que está sendo enviado
	# https://stackoverflow.com/a/3745250/4668660
	followTags = true

[gui]
	editor = gedit

[log]
	date = iso

[alias]
	# my- é meu prefixo para comandos. Utilizado para eu poder listar
	# os meus aliases usando autocomplete no shell.
	# alguns aliases nao tem o prefixo, para ser mais breve, mas sao
	# redirecionados para o seu correspondendo com prefixo
	
	# comuns [8]
	d = diff
	st = status
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	type = cat-file -t
	dump = cat-file -p
	# [9]
	my-last = log -1 HEAD

	# genericos
	my-go = checkout
	go = checkout # nao funciona autocomplete se nao for um alias simples
	my-goTest = !git stash save --quiet "salvamento automatico durante git go" && git checkout "$1"
	my-undo-changes = reset --hard
	undo-changes = !git my-undo-changes
	my-unstage = reset
	unstage = !git my-unstage
	# #TODO terminar este comando
	#my-begin-agin = git reset --soft origin/dev

	# quero apenas os arquivos para usar o software :)
	# Fonte: git clone --help
	my-download = clone --depth=1 --shallow-submodules --recurse-submodules
	my-download-all-branches = !git download --no-single-branch

	my-cherry-pick = cherry-pick -x

	# automacao do projeto [6]
	my-changed-specs = !git diff --name-only master -- spec | egrep '.rb'
	my-run-changed-specs = !zeus rspec `git changed-specs`
	my-changed-files = !git diff --name-only master | cat

	# analise de dados [6]
	my-list-authors = !git log --format="%aN"
	my-list-unique-authors = !git authors | sort -u
	my-list-ranked-authors = !git authors | sort | uniq -c | sort -n
	my-list-emails = !git log --format="%aE"
	my-list-email-domains = !git log --format="%aE" | awk -F'@' '{print $2}'
	my-list-unique-email-domains = !git email-domains | sort -u
	my-list-ranked-email-domains = !git email-domains | sort | uniq -c | sort -n
	my-log-one-week = !git diff --stat `git log --since='1 week' --format=%H | tail -1`
	#
	#diff-commit = show --color --pretty=format:%b

	my-log-changes = !git log -p -m --first-parent -30
	# [10]
	showtool = "!showci () { rev=$(git rev-parse \"${*:-HEAD}\"); git difftool $rev~1 $rev; }; showci"

	# automacao do projeto [6]
	changed-specs = !git diff --name-only master -- spec | egrep '.rb'
	run-changed-specs = !zeus rspec `git changed-specs`
	changed-files = !git diff --name-only master | cat

	# https://stackoverflow.com/questions/2016901/viewing-unpushed-git-commits
	my-log-unpushed = log @{push}..

	# Nao utilizo um format no gitconfig para poder continuar usando o git log no formato comum ou perto disso
	# Baseado em https://stackoverflow.com/a/9463536/4668660
	my-log = log --pretty=format:'%C(auto,yellow)%h %C(auto,blue)%ad %C(auto,green)%<(20,trunc)%aN %C(auto,reset)%s%C(auto,red)% gD% D'

	# how can I see which commits are in homol but not in prod? git my-compare homol...prod
	# < significa que tem no homol
	# > significa que tem no prod
	# Baseado em: https://stackoverflow.com/a/7567953/4668660
	# #TODO usar --no-merges ?
	my-compare = !git my-log --left-right --graph --cherry-pick
	compare = !git my-compare


[svn]
	# [7]
	rmdir = true

[cola]
	spellcheck = false


############################
#                          #
#         Referências      #
#                          #
############################
# [0] http://mycomputeradventures.blogspot.com.br/2012/08/git-external-diff-merge-tools_30.html
# [1] http://technotales.wordpress.com/2009/05/17/git-diff-with-vimdiff/
# [2] http://jeetworks.org/node/90
# [3] http://stackoverflow.com/questions/255202/how-do-i-view-git-diff-output-with-a-visual-diff-program
# [4] http://fellipe.com/blog/definindo-configuracoes-do-gitconfig-apos-a-instalacao-do-git/
# [5] http://meldmerge.org/help/resolving-conflicts.html
# [6] https://github.com/sdball/dotfiles/blob/master/.gitconfig
# [7] https://git.wiki.kernel.org/index.php/Git-svn
# [8] https://githowto.com/aliases
# [9] https://git-scm.com/book/tr/v2/Git-Basics-Git-Aliases
# [10] http://stackoverflow.com/questions/17558221/how-can-i-view-the-output-of-git-show-in-a-diff-viewer-like-meld-kdiff3-etc

#EOF
