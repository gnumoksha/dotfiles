############################
#                          #
#    GIT configurations    #
#                          #
############################

[user]
	name = Tobias Sette
	email = contato@tobias.ws
	signingkey = E724F606EFFF66F7

[github]
	user = gnumoksha

[color]
	# [4]
	diff = auto
	grep = auto
	interactive = auto
	status = auto
	branch = auto
	status = auto
	ui = true

[diff]
	# [0] [1] [2] [3]
	# meld | diffuse | kompare | kdiff3
	# diffmerge | bcompare
	tool = meld
	guitool = meld
	submodule = log

[diff "exif"]
	# For more comprehensive diff
	# https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes
	textconv = exiftool

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse

[core]
# Habilitar isso em sistemas nao case sensitive
	#ignoreCase = true
	editor = vim
	#eol=lf
	autocrlf = input # valor 'true' causou erro no zsh: "command not found: ^M"
	safecrlf = warn
	pager = diff-so-fancy | less --tabs=4 -RFX

[merge]
	# [5]
	tool = meld
	# deleta os arquivos de backup após o merge ser resolvido
	keepBackup = false

# TODO is it necessary?
;[merge "ours"]
	;# Merge strategy
	;# https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes#Merge-Strategies
	;driver = true

[status]
	submodulesummary = 1

[rebase]
	# Whether to show a diffstat of what changed upstream since the last rebase. False by default.
	stat = true

	# When set to true, automatically create a temporary stash entry before the operation begins, and apply it
	# after the operation ends. This means that you can run rebase on a dirty worktree. However,
	# use with care: the final stash application after a successful rebase might result in non-trivial conflicts.
	# Defaults to false.
	autoStash = true

[pull]
	# https://stackoverflow.com/a/30209750/4668660
	rebase = true

[push]
	# push the current branch to update a branch with the same name on the receiving end. Works in both
	# central and non-central workflows.
	default = current

	# If set to true enable --follow-tags option by default, wich means push all the refs that would be pushed
	# without this option, and also push annotated tags in refs/tags that are missing from the remote but are
	# pointing at commit-ish that are reachable from the refs being pushed.
	followTags = true

[gui]
	editor = gedit

[log]
	date = iso

[alias]
	# General use
	go = checkout
	goTest = !git stash save --quiet "salvamento automatico durante git go" && git checkout "$1"
	st = status
	df = diff
	sh = stash

	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	type = cat-file -t
	dump = cat-file -p
	fetch = fetch --all
	pull = pull --all
	stash-all = !git stash save --include-untracked "Stash all at $(date +%Y-%m-%d_%H:%M:%S)"
	stash-all-changed = stash --keep-index
	# https://stackoverflow.com/questions/10312521/how-to-fetch-all-git-branches
	# https://coderwall.com/p/0ypmka/git-clone-all-remote-branches-locally
	fetch-all = "! for branch in $(git branch -a | grep remotes | grep -v HEAD); do git branch --track ${branch#remotes/origin/} $branch; done"
	clone-all = !git fetch-all
	discard = reset --hard HEAD
# TODO remover tambem arquivos modificados localmente e nao trackeados
	discard-all = !git discard && git clean -f -d -i
	unstage = reset
	#TODO terminar este comando
	#my-begin-agin = git reset --soft origin/dev
	# quero apenas os arquivos para usar o software :)
	# Fonte: git clone --help
	download = clone --depth=1 --shallow-submodules --recurse-submodules
	download-all-branches = !git download --no-single-branch

	cherry-pick = cherry-pick -x

	# automacao do projeto [6]
	changed-specs = !git diff --name-only master -- spec | egrep '.rb'
	run-changed-specs = !zeus rspec `git changed-specs`
	changed-files = !git diff --name-only master | cat

	# analise de dados [6]
	list-authors = !git log --format="%aN"
	list-unique-authors = !git authors | sort -u
	list-ranked-authors = !git authors | sort | uniq -c | sort -n
	list-emails = !git log --format="%aE"
	list-email-domains = !git log --format="%aE" | awk -F'@' '{print $2}'
	list-unique-email-domains = !git email-domains | sort -u
	list-ranked-email-domains = !git email-domains | sort | uniq -c | sort -n
	log-one-week = !git diff --stat `git log --since='1 week' --format=%H | tail -1`
	#
	#diff-commit = show --color --pretty=format:%b

	log-changes = !git log -p -m --first-parent -30
	# [10]
	showtool = "!showci () { rev=$(git rev-parse \"${*:-HEAD}\"); git difftool $rev~1 $rev; }; showci"

	# https://stackoverflow.com/questions/2016901/viewing-unpushed-git-commits
	log-unpushed = log @{push}..

	# Nao utilizo um format no gitconfig para poder continuar usando o git log no formato comum ou perto disso
	# Baseado em https://stackoverflow.com/a/9463536/4668660
	my-log = log --pretty=format:'%C(auto,yellow)%h %C(auto,blue)%ad %C(auto,green)%<(20,trunc)%aN %C(auto,reset)%s%C(auto,red)% gD% D'

	# how can I see which commits are in homol but not in prod? git my-compare homol...prod
	# < significa que tem no homol
	# > significa que tem no prod
	# Baseado em: https://stackoverflow.com/a/7567953/4668660
	# #TODO usar --no-merges ?
	compare = !git my-log --left-right --graph --cherry-pick

[svn]
	# [7]
	rmdir = true

[cola]
	spellcheck = false
	blameviewer = git gui blame

[instaweb]
browser = chromium

[web]
browser = chromium

[browser "firefox"]
#path = /opt/_apps/_gnu+linux/_internet/firefox/firefox
#cmd = /opt/_apps/_gnu+linux/_internet/firefox/firefox --new-tab

[fetch]
	prune = true


############################
#                          #
#         Referências      #
#                          #
############################
# [0] http://mycomputeradventures.blogspot.com.br/2012/08/git-external-diff-merge-tools_30.html
# [1] http://technotales.wordpress.com/2009/05/17/git-diff-with-vimdiff/
# [2] http://jeetworks.org/node/90
# [3] http://stackoverflow.com/questions/255202/how-do-i-view-git-diff-output-with-a-visual-diff-program
# [4] http://fellipe.com/blog/definindo-configuracoes-do-gitconfig-apos-a-instalacao-do-git/
# [5] http://meldmerge.org/help/resolving-conflicts.html
# [6] https://github.com/sdball/dotfiles/blob/master/.gitconfig
# [7] https://git.wiki.kernel.org/index.php/Git-svn
# [8] https://githowto.com/aliases
# [9] https://git-scm.com/book/tr/v2/Git-Basics-Git-Aliases
# [10] http://stackoverflow.com/questions/17558221/how-can-i-view-the-output-of-git-show-in-a-diff-viewer-like-meld-kdiff3-etc

#EOF
