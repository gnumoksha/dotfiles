#|
#| GIT configuration
#|

[alias]
	br = branch
	co = commit --verbose --status
	ck = checkout
	df = diff HEAD
	fe = fetch --all
	p = push
	ps = push
	pl = pull --all
	st = status -s
	master = !git checkout master && git pull
	main = !git checkout main && git pull

	# checkout --theirs path/to/file
	checkout-theirs = checkout --theirs

	# https://stackoverflow.com/questions/10697463/resolve-git-merge-conflicts-in-favor-of-their-changes-during-a-pull
	rebase-theirs = rebase --theirs

	# git checkout --theirs
	# git pull -s recursive -X theirs <remoterepo or other repo>
	pull-theirs = pull -X theirs

	merge-theirs = merge --strategy-option theirs

	branch-status = branch -avv
	# git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D
	branch-prune = !git remote prune origin && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -r git branch -D

	stash-all = !git stash save --include-untracked "Stash all at $(date +%Y-%m-%d_%H:%M:%S)"
	stash-all-changed = stash --keep-index
	stash-pop-force = !git stash show -p | git apply
	# https://stackoverflow.com/questions/10312521/how-to-fetch-all-git-branches
	# https://coderwall.com/p/0ypmka/git-clone-all-remote-branches-locally
	fetch-all = "! for branch in $(git branch -a | grep remotes | grep -v HEAD); do git branch --track ${branch#remotes/origin/} $branch; done"
	clone-all = !git fetch-all
	undo-changes = reset --hard HEAD
	undo-last-commit = reset HEAD~
	undo-all-changes = !git undo-changes && git clean -f -d -i
	unstage = reset
	download = clone --depth=1 --shallow-submodules --recurse-submodules

	# Example: git added-in docker-compose.yml
	added-in = log --follow --diff-filter=A --find-renames --

	# https://stackoverflow.com/questions/2016901/viewing-unpushed-git-commits
	log-unpushed = log @{push}..
	
	last = !git log-one-line -5
	log-graph = log --decorate=short --source --cherry-mark --oneline --grap
	log-my-commits = !git log --author=\"$(git config user.name)\"

	set-upstream = !git branch --set-upstream-to=origin/$(git symbolic-ref --short HEAD)
	# show Without Whitespace
	show-ww = show --ignore-space-at-eol --ignore-space-change --ignore-all-space --ignore-blank-lines
	show-with-branch = !git show $1 | git name-rev --stdin
	backup-uncommited-files = !git ls-files --modified --others --exclude-standard -z | xargs -0 tar rvf backup.tar
	# Usage git commit at "2018-02-20 08:50:00
	commit-at = !export GIT_{AUTHOR,COMMITTER}_DATE="2018-05-05 12:13:14" && git co
	commit-random = !git commit -m \"$(curl -s http://whatthecommit.com/index.txt)\"

[core]
	# true - converts LF endings into CRLF when you check out code. [11]
	# input - tell Git to convert CRLF to LF on commit but not the other way around.
	# false - if you are doing only a windows project with windows people.
	# this can be set by repository with .gitattributes file.
	autocrlf = input
	# "warn", in which case Git will only warn about an irreversible conversion but continue the operation.
	safecrlf = warn
	pager = [ $(command -v diff-so-fancy) ] && diff-so-fancy | less --tabs=4 -RFX || less

[commit]
	template = ~/.config/git/templates/commit.txt

[credential]
	helper = cache --timeout=300

[cola]
	spellcheck = true
	blameviewer = git gui blame

[color]
	diff = auto
	grep = auto
	interactive = auto
	status = auto
	branch = auto
	ui = true

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse

[diff]
	submodule = log

[diff "exif"]
	# For more comprehensive diff
	# https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes
	textconv = exiftool

[fetch]
	prune = true # false if remote name?
	;pruneTags = true

[include]
	# Include the config file if it exists in the current directory.
	path = ./config.private

[init]
	defaultBranch = main

[log]
	date = iso

[merge]
	keepBackup = false
	conflictstyle = diff3
	ff = yes
	commit = no

[mergetool]
	keepBackup = false

[pull]
	rebase = true
	default = current

[push]
	# push the current branch to update a branch with the same name on the receiving end. Works in both
	# central and non-central workflows.
	default = current
	#default = matching

	# If set to true enable --follow-tags option by default, wich means push all the refs that would be pushed
	# without this option, and also push annotated tags in refs/tags that are missing from the remote but are
	# pointing at commit-ish that are reachable from the refs being pushed.
	followTags = true

[rebase]
	# Whether to show a diffstat of what changed upstream since the last rebase. False by default.
	stat = true

	# When set to true, automatically create a temporary stash entry before the operation begins, and apply it
	# after the operation ends. This means that you can run rebase on a dirty worktree. However,
	# use with care: the final stash application after a successful rebase might result in non-trivial conflicts.
	# Defaults to false.
	autoStash = true

[status]
	submodulesummary = 1

[svn]
	rmdir = true

[tar "tar.xz"]
	command = xz -c

#|
#| References
#|
# man git-config

