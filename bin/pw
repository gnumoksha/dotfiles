#!/usr/bin/env sh

# Generate passwords.
# Usage: pw <length>
# Examples:
# pw
# pw 10
#
# Resources:
# https://www.makeuseof.com/tag/5-ways-generate-secure-passwords-linux/
# https://www.howtogeek.com/howto/30184/10-ways-to-generate-a-random-password-from-the-command-line/
# TODO http://tldp.org/LDP/abs/html/contributed-scripts.html#PW
# TODO https://opensource.com/article/19/11/random-passwords-bash-script

pp() { printf "%-10s" "$@"; }

has() {
  command -v "$1" 1>/dev/null 2>&1
}

urandom_strong_password() {
  tr </dev/urandom -dc 'A-Z-a-z-0-9!@#$%^&*+-' |
    head -c "${1:-$pw_length}"
}

pw_length=${1:-}
[ -z "$pw_length" ] && pw_length=15

if [ ! -t 1 ]; then
  # output is not a terminal, so assume it is a pipe and then print only one password.
  urandom_strong_password "$@"
  echo

  exit 0
fi

printf "> strong password: \n"

if has pwgen; then
  pp "pwgen: "
  pwgen --capitalize --numerals --symbols --secure --ambiguous \
    $pw_length 1
fi

pp "urandom: "
urandom_strong_password "$@"
echo

printf "\n> simple password: \n"

if has pwgen; then
  pp "pwgen: "
  pwgen $pw_length 1
fi

pp "urandom:" &&
  tr </dev/urandom -dc _A-Z-a-z-0-9 |
  head -c "${1:-$pw_length}"
echo

if has openssl; then
  pp "openssl: "
  openssl rand -base64 "$pw_length" |
    head -c "$pw_length"
  echo
fi

if has gpg; then
  pp "gpg: "
  gpg --gen-random -a 0 "$pw_length" | head -c "$pw_length"

  echo
fi

# makepasswd is too simple
#[[ $(command makepasswd) ]] && \
#pp "makepasswd: " && \
#makepasswd --chars=$pw_length;

printf "\n> Other types: \n"

# left-hand password, which would let you type your password with one hand.
pp "lefthand: "
tr </dev/urandom -dc '12345!@#$%qwertQWERTasdfgASDFGzxcvbZXCVB' |
  head -c "$pw_length"
echo

if has diceware; then
  pp "diceware: "
  diceware
fi

# https://github.com/redacted/XKCD-password-generator
if has xkcdpass; then
  pp "xkcdpass: "
  xkcdpass --numwords=3 --delimiter=@ --case=random

  pp "acrostic: "
  xkcdpass --acrostic "${USER}"
fi

# #TODO https://xkpasswd.net/s/
